pipeline {
  agent any
   environment {
    DOCKERHUB_REPO = 'ashrafmagdy92/alx-repo'
    IMAGE_TAG = "messaging-app"
  }
  
  stages {
    stage('Checkout') {
      steps {
        // Public repo example; if private, set credentials in the job config.
        git branch: 'main', url: 'https://github.com/Ashraf-Magdy-Mostafa/alx-backend-python.git', credentialsId: 'github-creds'
      }
    }
    stage('Test') {
      steps {
        dir('messaging_app'){
          sh '''
          python -m pip install --upgrade pip || true
          if [ -f messaging_app/requirements.txt ]; then
            pip3 install -r messaging_app/requirements.txt
          else
            pip3  install pytest
          fi
          pytest --junitxml=pytest.xml
          '''
          }
      }
    }
    stage('Docker Build') {
      steps {
        sh '''
          docker build -t ${DOCKERHUB_REPO}:${IMAGE_TAG} -f messaging_app/Dockerfile messaging_app
        '''
      }
    }
     stage('Docker Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                          usernameVariable: 'DOCKERHUB_USER',
                                          passwordVariable:  'DOCKERHUB_PASS')]) {
          sh '''
            echo "${DOCKERHUB_PASS}" | docker login -u "${DOCKERHUB_USER}" --password-stdin
            docker push ${DOCKERHUB_REPO}:${IMAGE_TAG}
            docker tag  ${DOCKERHUB_REPO}:${IMAGE_TAG} ${DOCKERHUB_REPO}:latest
            docker push ${DOCKERHUB_REPO}:latest
          '''
        }
      }
    }
  

  }
  post {
    always {
      junit 'pytest.xml'
    }
    success { echo "✅ Image pushed: ${DOCKERHUB_REPO}:${IMAGE_TAG}" }
    failure { echo "❌ Build failed. Check logs and test report." }
  }
}
